library verilog;
use verilog.vl_types.all;
entity controller is
    generic(
        reset           : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi0, Hi0);
        halt            : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi0, Hi1);
        fetch           : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi1, Hi0);
        memread         : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi1, Hi1);
        exec1           : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi0, Hi0);
        exec2           : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi0, Hi1);
        exec1lda        : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi1, Hi0);
        exec2lda        : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi1, Hi1);
        incpc           : vl_logic_vector(3 downto 0) := (Hi1, Hi0, Hi0, Hi0);
        exec1sta        : vl_logic_vector(3 downto 0) := (Hi1, Hi0, Hi0, Hi1);
        exec2sta        : vl_logic_vector(3 downto 0) := (Hi1, Hi0, Hi1, Hi0);
        b0000           : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        b1111           : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi1, Hi1);
        nop             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        hlt             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi1);
        szf             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        czf             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi1);
        scf             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi0, Hi0);
        ccf             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi0, Hi1);
        cwp             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi1, Hi0);
        jpr             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi1, Hi1);
        brz             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi0);
        brc             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi1);
        awp             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi1, Hi0);
        mvr             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi1);
        lda             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        sta             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi1);
        inp             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi0, Hi0);
        oup             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi0, Hi1);
        anl             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi1, Hi0);
        orr             : vl_logic_vector(0 to 3) := (Hi0, Hi1, Hi1, Hi1);
        nol             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi0);
        shl             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi1);
        shr             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi1, Hi0);
        add             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi1, Hi1);
        sub             : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi0, Hi0);
        mul             : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi0, Hi1);
        cmp             : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi1, Hi0);
        mil             : vl_logic_vector(0 to 1) := (Hi0, Hi0);
        mih             : vl_logic_vector(0 to 1) := (Hi0, Hi1);
        spc             : vl_logic_vector(0 to 1) := (Hi1, Hi0);
        jpa             : vl_logic_vector(0 to 1) := (Hi1, Hi1)
    );
    port(
        ExternalReset   : in     vl_logic;
        clk             : in     vl_logic;
        ResetPC         : out    vl_logic;
        PCplusI         : out    vl_logic;
        PCplus1         : out    vl_logic;
        RplusI          : out    vl_logic;
        Rplus0          : out    vl_logic;
        Rs_on_AddressUnitRSide: out    vl_logic;
        Rd_on_AddressUnitRSide: out    vl_logic;
        EnablePC        : out    vl_logic;
        B15to0          : out    vl_logic;
        AandB           : out    vl_logic;
        AorB            : out    vl_logic;
        notB            : out    vl_logic;
        shlB            : out    vl_logic;
        shrB            : out    vl_logic;
        AaddB           : out    vl_logic;
        AsubB           : out    vl_logic;
        AmulB           : out    vl_logic;
        AcmpB           : out    vl_logic;
        RFLwrite        : out    vl_logic;
        RFHwrite        : out    vl_logic;
        WPreset         : out    vl_logic;
        WPadd           : out    vl_logic;
        IRload          : out    vl_logic;
        SRload          : out    vl_logic;
        Address_on_Databus: out    vl_logic;
        ALU_on_Databus  : out    vl_logic;
        IR_on_LOpndBus  : out    vl_logic;
        IR_on_HOpndBus  : out    vl_logic;
        RFright_on_OpndBus: out    vl_logic;
        ReadMem         : out    vl_logic;
        WriteMem        : out    vl_logic;
        ReadIO          : out    vl_logic;
        WriteIO         : out    vl_logic;
        Cset            : out    vl_logic;
        Creset          : out    vl_logic;
        Zset            : out    vl_logic;
        Zreset          : out    vl_logic;
        Shadow          : out    vl_logic;
        Instruction     : in     vl_logic_vector(15 downto 0);
        Cflag           : in     vl_logic;
        Zflag           : in     vl_logic;
        memDataReady    : in     vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of reset : constant is 2;
    attribute mti_svvh_generic_type of halt : constant is 2;
    attribute mti_svvh_generic_type of fetch : constant is 2;
    attribute mti_svvh_generic_type of memread : constant is 2;
    attribute mti_svvh_generic_type of exec1 : constant is 2;
    attribute mti_svvh_generic_type of exec2 : constant is 2;
    attribute mti_svvh_generic_type of exec1lda : constant is 2;
    attribute mti_svvh_generic_type of exec2lda : constant is 2;
    attribute mti_svvh_generic_type of incpc : constant is 2;
    attribute mti_svvh_generic_type of exec1sta : constant is 2;
    attribute mti_svvh_generic_type of exec2sta : constant is 2;
    attribute mti_svvh_generic_type of b0000 : constant is 1;
    attribute mti_svvh_generic_type of b1111 : constant is 1;
    attribute mti_svvh_generic_type of nop : constant is 1;
    attribute mti_svvh_generic_type of hlt : constant is 1;
    attribute mti_svvh_generic_type of szf : constant is 1;
    attribute mti_svvh_generic_type of czf : constant is 1;
    attribute mti_svvh_generic_type of scf : constant is 1;
    attribute mti_svvh_generic_type of ccf : constant is 1;
    attribute mti_svvh_generic_type of cwp : constant is 1;
    attribute mti_svvh_generic_type of jpr : constant is 1;
    attribute mti_svvh_generic_type of brz : constant is 1;
    attribute mti_svvh_generic_type of brc : constant is 1;
    attribute mti_svvh_generic_type of awp : constant is 1;
    attribute mti_svvh_generic_type of mvr : constant is 1;
    attribute mti_svvh_generic_type of lda : constant is 1;
    attribute mti_svvh_generic_type of sta : constant is 1;
    attribute mti_svvh_generic_type of inp : constant is 1;
    attribute mti_svvh_generic_type of oup : constant is 1;
    attribute mti_svvh_generic_type of anl : constant is 1;
    attribute mti_svvh_generic_type of orr : constant is 1;
    attribute mti_svvh_generic_type of nol : constant is 1;
    attribute mti_svvh_generic_type of shl : constant is 1;
    attribute mti_svvh_generic_type of shr : constant is 1;
    attribute mti_svvh_generic_type of add : constant is 1;
    attribute mti_svvh_generic_type of sub : constant is 1;
    attribute mti_svvh_generic_type of mul : constant is 1;
    attribute mti_svvh_generic_type of cmp : constant is 1;
    attribute mti_svvh_generic_type of mil : constant is 1;
    attribute mti_svvh_generic_type of mih : constant is 1;
    attribute mti_svvh_generic_type of spc : constant is 1;
    attribute mti_svvh_generic_type of jpa : constant is 1;
end controller;
